// <auto-generated />
using Infrastructure;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Infrastructure.Migrations
{
    [DbContext(typeof(LockDbContext))]
    [Migration("20230401025259_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Domain.Door", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("OfficeId")
                        .HasColumnType("bigint");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("OfficeId");

                    b.ToTable("Doors", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            Name = "FrontDoor",
                            OfficeId = 1L,
                            Type = "Main"
                        },
                        new
                        {
                            Id = 2L,
                            Name = "BackDoor",
                            OfficeId = 1L,
                            Type = "Back"
                        },
                        new
                        {
                            Id = 3L,
                            Name = "StoreRoom",
                            OfficeId = 1L,
                            Type = "Store"
                        },
                        new
                        {
                            Id = 4L,
                            Name = "FrontDoor",
                            OfficeId = 2L,
                            Type = "Main"
                        });
                });

            modelBuilder.Entity("Domain.Office", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Offices");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            Address = "Amsterdam",
                            Name = "Clay"
                        },
                        new
                        {
                            Id = 2L,
                            Address = "Eindhoven",
                            Name = "Philips"
                        });
                });

            modelBuilder.Entity("Domain.Role", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Roles");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            Description = "",
                            Name = "Manager"
                        },
                        new
                        {
                            Id = 2L,
                            Description = "",
                            Name = "Director"
                        },
                        new
                        {
                            Id = 3L,
                            Description = "",
                            Name = "Developer"
                        },
                        new
                        {
                            Id = 4L,
                            Description = "",
                            Name = "Finance"
                        });
                });

            modelBuilder.Entity("Domain.RoleDoorMapping", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<long>("DoorId")
                        .HasColumnType("bigint");

                    b.Property<long>("RoleId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("DoorId");

                    b.HasIndex("RoleId", "DoorId")
                        .HasDatabaseName("IX_RoleDoorMapping_RoleId_DoorId");

                    b.ToTable("RoleDoorMappings", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            DoorId = 1L,
                            RoleId = 1L
                        },
                        new
                        {
                            Id = 2L,
                            DoorId = 1L,
                            RoleId = 2L
                        },
                        new
                        {
                            Id = 3L,
                            DoorId = 1L,
                            RoleId = 3L
                        },
                        new
                        {
                            Id = 4L,
                            DoorId = 1L,
                            RoleId = 4L
                        },
                        new
                        {
                            Id = 5L,
                            DoorId = 2L,
                            RoleId = 1L
                        },
                        new
                        {
                            Id = 6L,
                            DoorId = 2L,
                            RoleId = 2L
                        },
                        new
                        {
                            Id = 7L,
                            DoorId = 3L,
                            RoleId = 3L
                        },
                        new
                        {
                            Id = 8L,
                            DoorId = 4L,
                            RoleId = 4L
                        });
                });

            modelBuilder.Entity("Domain.User", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("EmailId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EmployeeId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Firstname")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte>("IsAdmin")
                        .HasColumnType("tinyint");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("RoleId")
                        .HasColumnType("bigint");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.HasIndex("UserName")
                        .IsUnique()
                        .HasDatabaseName("IX_User_UserName");

                    b.ToTable("Users", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            EmailId = "sheldoncooper@gmail.com",
                            EmployeeId = "1000",
                            Firstname = "Sheldon",
                            IsAdmin = (byte)1,
                            LastName = "Cooper",
                            Password = "c2hlbGRvbg==",
                            RoleId = 1L,
                            UserName = "sheldon"
                        },
                        new
                        {
                            Id = 2L,
                            EmailId = "adia@gmail.com",
                            EmployeeId = "1001",
                            Firstname = "Adia",
                            IsAdmin = (byte)0,
                            LastName = "Bugg",
                            Password = "YWRpYQ==",
                            RoleId = 2L,
                            UserName = "adia"
                        },
                        new
                        {
                            Id = 3L,
                            EmailId = "olive@gmail.com",
                            EmployeeId = "1002",
                            Firstname = "Olive",
                            IsAdmin = (byte)0,
                            LastName = "yew",
                            Password = "b2xpdmU=",
                            RoleId = 3L,
                            UserName = "olive"
                        },
                        new
                        {
                            Id = 4L,
                            EmailId = "peg@gmail.com",
                            EmployeeId = "1003",
                            Firstname = "Peg",
                            IsAdmin = (byte)0,
                            LastName = "Legge",
                            Password = "cGVn",
                            RoleId = 3L,
                            UserName = "peg"
                        },
                        new
                        {
                            Id = 5L,
                            EmailId = "allie@gmail.com",
                            EmployeeId = "1004",
                            Firstname = "Allie",
                            IsAdmin = (byte)0,
                            LastName = "Grater",
                            Password = "YWxsaWU=",
                            RoleId = 4L,
                            UserName = "allie"
                        });
                });

            modelBuilder.Entity("Domain.Door", b =>
                {
                    b.HasOne("Domain.Office", "Office")
                        .WithMany("Doors")
                        .HasForeignKey("OfficeId")
                        .IsRequired()
                        .HasConstraintName("FK_Doors_OfficeId");

                    b.Navigation("Office");
                });

            modelBuilder.Entity("Domain.RoleDoorMapping", b =>
                {
                    b.HasOne("Domain.Door", "Door")
                        .WithMany("RoleDoorMappings")
                        .HasForeignKey("DoorId")
                        .IsRequired()
                        .HasConstraintName("FK_RoleDoorMapping_DoorId");

                    b.HasOne("Domain.Role", "Role")
                        .WithMany("RoleDoorMappings")
                        .HasForeignKey("RoleId")
                        .IsRequired()
                        .HasConstraintName("FK_RoleDoorMapping_RoleId");

                    b.Navigation("Door");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("Domain.User", b =>
                {
                    b.HasOne("Domain.Role", "Roles")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Roles");
                });

            modelBuilder.Entity("Domain.Door", b =>
                {
                    b.Navigation("RoleDoorMappings");
                });

            modelBuilder.Entity("Domain.Office", b =>
                {
                    b.Navigation("Doors");
                });

            modelBuilder.Entity("Domain.Role", b =>
                {
                    b.Navigation("RoleDoorMappings");
                });
#pragma warning restore 612, 618
        }
    }
}
